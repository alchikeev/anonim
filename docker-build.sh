#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤

set -e

echo "üê≥ –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è –ê–Ω–æ–Ω–∏–º –ú–µ–∫—Ç–µ–ø"
echo "=================================================="

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–æ–≤
if [ ! -f ".env.prod" ]; then
    echo "‚ùå –§–∞–π–ª .env.prod –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    echo "–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env.prod —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"
    exit 1
fi

if [ ! -f ".env.dev" ]; then
    echo "‚ùå –§–∞–π–ª .env.dev –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    echo "–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env.dev —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
    exit 1
fi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
build_prod() {
    echo "üöÄ –°–±–æ—Ä–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞..."
    docker-compose build
    
    echo "üì¶ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker-compose up -d
    
    echo "‚úÖ –ü—Ä–æ–¥–∞–∫—à–µ–Ω –∑–∞–ø—É—â–µ–Ω!"
    echo "üåê –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: https://anonim-m.online"
    echo "üìä –õ–æ–≥–∏: docker-compose logs -f"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ —Å Caddy
build_prod_caddy() {
    echo "üöÄ –°–±–æ—Ä–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ —Å Caddy..."
    docker-compose -f docker-compose.caddy.yml build
    
    echo "üì¶ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å Caddy..."
    docker-compose -f docker-compose.caddy.yml up -d
    
    echo "‚úÖ –ü—Ä–æ–¥–∞–∫—à–µ–Ω —Å Caddy –∑–∞–ø—É—â–µ–Ω!"
    echo "üåê –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: https://anonim-m.online"
    echo "üìä –õ–æ–≥–∏: docker-compose -f docker-compose.caddy.yml logs -f"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
build_dev() {
    echo "üõ†Ô∏è –°–±–æ—Ä–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
    docker-compose -f docker-compose.dev.yml build
    
    echo "üì¶ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
    docker-compose -f docker-compose.dev.yml up -d
    
    echo "‚úÖ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!"
    echo "üåê –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://127.0.0.1:8000"
    echo "üìä –õ–æ–≥–∏: docker-compose -f docker-compose.dev.yml logs -f"
}

# –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
stop_containers() {
    echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker-compose down 2>/dev/null || true
    docker-compose -f docker-compose.dev.yml down 2>/dev/null || true
    docker-compose -f docker-compose.caddy.yml down 2>/dev/null || true
    echo "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!"
}

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏
clean_containers() {
    echo "üßπ –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ –æ–±—Ä–∞–∑–æ–≤..."
    docker-compose down --rmi all --volumes --remove-orphans 2>/dev/null || true
    docker-compose -f docker-compose.dev.yml down --rmi all --volumes --remove-orphans 2>/dev/null || true
    docker-compose -f docker-compose.caddy.yml down --rmi all --volumes --remove-orphans 2>/dev/null || true
    docker system prune -f
    echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ª–æ–≥–æ–≤
show_logs() {
    echo "üìä –ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤..."
    if docker-compose ps | grep -q "Up"; then
        docker-compose logs -f
    elif docker-compose -f docker-compose.dev.yml ps | grep -q "Up"; then
        docker-compose -f docker-compose.dev.yml logs -f
    elif docker-compose -f docker-compose.caddy.yml ps | grep -q "Up"; then
        docker-compose -f docker-compose.caddy.yml logs -f
    else
        echo "‚ùå –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞
show_status() {
    echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    echo "=== –ü—Ä–æ–¥–∞–∫—à–µ–Ω (Nginx) ==="
    docker-compose ps 2>/dev/null || echo "–ù–µ –∑–∞–ø—É—â–µ–Ω"
    echo ""
    echo "=== –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ ==="
    docker-compose -f docker-compose.dev.yml ps 2>/dev/null || echo "–ù–µ –∑–∞–ø—É—â–µ–Ω"
    echo ""
    echo "=== –ü—Ä–æ–¥–∞–∫—à–µ–Ω (Caddy) ==="
    docker-compose -f docker-compose.caddy.yml ps 2>/dev/null || echo "–ù–µ –∑–∞–ø—É—â–µ–Ω"
}

# –§—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
enter_container() {
    echo "üîß –í—Ö–æ–¥ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..."
    if docker-compose ps | grep -q "Up"; then
        docker-compose exec web bash
    elif docker-compose -f docker-compose.dev.yml ps | grep -q "Up"; then
        docker-compose -f docker-compose.dev.yml exec web bash
    elif docker-compose -f docker-compose.caddy.yml ps | grep -q "Up"; then
        docker-compose -f docker-compose.caddy.yml exec web bash
    else
        echo "‚ùå –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ Django
run_django_command() {
    echo "üêç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Django –∫–æ–º–∞–Ω–¥—ã: $1"
    if docker-compose ps | grep -q "Up"; then
        docker-compose exec web python manage.py $1
    elif docker-compose -f docker-compose.dev.yml ps | grep -q "Up"; then
        docker-compose -f docker-compose.dev.yml exec web python manage.py $1
    elif docker-compose -f docker-compose.caddy.yml ps | grep -q "Up"; then
        docker-compose -f docker-compose.caddy.yml exec web python manage.py $1
    else
        echo "‚ùå –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    fi
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
case "$1" in
    "prod")
        build_prod
        ;;
    "prod-caddy")
        build_prod_caddy
        ;;
    "dev")
        build_dev
        ;;
    "stop")
        stop_containers
        ;;
    "clean")
        clean_containers
        ;;
    "logs")
        show_logs
        ;;
    "status")
        show_status
        ;;
    "shell")
        enter_container
        ;;
    "migrate")
        run_django_command "migrate"
        ;;
    "collectstatic")
        run_django_command "collectstatic --noinput"
        ;;
    "init")
        run_django_command "init_data"
        ;;
    "help"|"")
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–∫–æ–º–∞–Ω–¥–∞]"
        echo ""
        echo "–ö–æ–º–∞–Ω–¥—ã:"
        echo "  prod        - –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ (—Å Nginx)"
        echo "  prod-caddy  - –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ (—Å Caddy)"
        echo "  dev         - –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
        echo "  stop        - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        echo "  clean       - –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ –æ–±—Ä–∞–∑–æ–≤"
        echo "  logs        - –ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤"
        echo "  status      - –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        echo "  shell       - –í—Ö–æ–¥ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
        echo "  migrate     - –í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏"
        echo "  collectstatic - –°–æ–±—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã"
        echo "  init        - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"
        echo "  help        - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        echo ""
        echo "–î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º Caddy –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
        echo "  ./caddy-integration.sh install"
        ;;
    *)
        echo "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
        echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '$0 help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
        exit 1
        ;;
esac
