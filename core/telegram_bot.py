import logging
import json
from typing import Dict, Any, Optional
from django.conf import settings
from django.contrib.auth import authenticate
from django.contrib.auth import get_user_model
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
from django.utils.decorators import method_decorator
from django.views import View
import requests
from .models import School
from dashboard.models import Message

User = get_user_model()
logger = logging.getLogger(__name__)

class TelegramBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞"""
    
    def __init__(self):
        self.token = settings.TELEGRAM_BOT_TOKEN
        self.username = settings.TELEGRAM_BOT_USERNAME
        self.base_url = f"https://api.telegram.org/bot{self.token}"
        
    def send_message(self, chat_id: int, text: str, reply_markup: Optional[Dict] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            url = f"{self.base_url}/sendMessage"
            data = {
                'chat_id': chat_id,
                'text': text,
                'parse_mode': 'HTML',
                'disable_web_page_preview': True
            }
            
            if reply_markup:
                data['reply_markup'] = json.dumps(reply_markup)
                
            response = requests.post(url, data=data, timeout=10)
            response.raise_for_status()
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
            return False
    
    def edit_message(self, chat_id: int, message_id: int, text: str, reply_markup: Optional[Dict] = None) -> bool:
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            url = f"{self.base_url}/editMessageText"
            data = {
                'chat_id': chat_id,
                'message_id': message_id,
                'text': text,
                'parse_mode': 'HTML',
                'disable_web_page_preview': True
            }
            
            if reply_markup:
                data['reply_markup'] = json.dumps(reply_markup)
                
            response = requests.post(url, data=data, timeout=10)
            response.raise_for_status()
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
            return False
    
    def answer_callback_query(self, callback_query_id: str, text: str = None, show_alert: bool = False) -> bool:
        """–û—Ç–≤–µ—Ç –Ω–∞ callback query"""
        try:
            url = f"{self.base_url}/answerCallbackQuery"
            data = {
                'callback_query_id': callback_query_id,
                'show_alert': show_alert
            }
            
            if text:
                data['text'] = text
                
            response = requests.post(url, data=data, timeout=10)
            response.raise_for_status()
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback query: {e}")
            return False

class TelegramBotHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram –±–æ—Ç–∞"""
    
    def __init__(self):
        self.bot = TelegramBot()
        self.user_sessions = {}  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
    def handle_start(self, chat_id: int, user_data: Dict) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–Ω–æ–Ω–∏–º –ú–µ–∫—Ç–µ–ø!</b>

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è–º–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.

–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–ª–æ–≥–∏–Ω</b>:
        """
        
        self.bot.send_message(chat_id, welcome_text)
        self.user_sessions[chat_id] = {'state': 'waiting_username'}
        
    def handle_username(self, chat_id: int, username: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞"""
        if chat_id not in self.user_sessions:
            self.handle_start(chat_id, {})
            return
            
        self.user_sessions[chat_id]['username'] = username
        self.user_sessions[chat_id]['state'] = 'waiting_password'
        
        self.bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–ø–∞—Ä–æ–ª—å</b>:")
        
    def handle_password(self, chat_id: int, password: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
        if chat_id not in self.user_sessions or 'username' not in self.user_sessions[chat_id]:
            self.handle_start(chat_id, {})
            return
            
        username = self.user_sessions[chat_id]['username']
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        user = authenticate(username=username, password=password)
        
        if user and user.role in ['super_admin', 'rayon_otdel', 'teacher']:
            # –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            user.telegram_chat_id = chat_id
            user.save()
            
            # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
            del self.user_sessions[chat_id]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            self.send_main_menu(chat_id, user)
            
        else:
            # –ù–µ—É–¥–∞—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            self.bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            self.user_sessions[chat_id]['state'] = 'waiting_username'
            self.bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–ª–æ–≥–∏–Ω</b>:")
    
    def send_main_menu(self, chat_id: int, user: User) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        role_display = user.get_role_display()
        
        if user.role == 'teacher':
            school_name = user.school.name if user.school else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞"
            menu_text = f"""
üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.get_full_name() or user.username}!</b>

üìã <b>–í–∞—à–∞ —Ä–æ–ª—å:</b> {role_display}
üè´ <b>–®–∫–æ–ª–∞:</b> {school_name}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
            """
        else:
            menu_text = f"""
üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.get_full_name() or user.username}!</b>

üìã <b>–í–∞—à–∞ —Ä–æ–ª—å:</b> {role_display}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
            """
        
        keyboard = self.get_main_menu_keyboard(user)
        self.bot.send_message(chat_id, menu_text, keyboard)
    
    def get_main_menu_keyboard(self, user: User) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        keyboard = {
            'inline_keyboard': []
        }
        
        if user.role == 'teacher':
            # –ú–µ–Ω—é –¥–ª—è —É—á–∏—Ç–µ–ª—è
            keyboard['inline_keyboard'] = [
                [{'text': 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —à–∫–æ–ª—ã', 'callback_data': 'stats_school'}],
                [{'text': 'üìù –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è', 'callback_data': 'new_messages'}],
                [{'text': '‚è≥ –í —Ä–∞–±–æ—Ç–µ', 'callback_data': 'in_progress_messages'}],
                [{'text': '‚úÖ –†–µ—à–µ–Ω–Ω—ã–µ', 'callback_data': 'resolved_messages'}],
                [{'text': 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'callback_data': 'refresh'}]
            ]
        elif user.role == 'rayon_otdel':
            # –ú–µ–Ω—é –¥–ª—è —Ä–∞–π–æ–Ω–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞
            keyboard['inline_keyboard'] = [
                [{'text': 'üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'callback_data': 'stats_all'}],
                [{'text': 'üè¢ –°–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–∞–π–æ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª', 'callback_data': 'general_messages'}],
                [{'text': 'üìù –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è', 'callback_data': 'new_messages'}],
                [{'text': '‚è≥ –í —Ä–∞–±–æ—Ç–µ', 'callback_data': 'in_progress_messages'}],
                [{'text': '‚úÖ –†–µ—à–µ–Ω–Ω—ã–µ', 'callback_data': 'resolved_messages'}],
                [{'text': 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'callback_data': 'refresh'}]
            ]
        else:
            # –ú–µ–Ω—é –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
            keyboard['inline_keyboard'] = [
                [{'text': 'üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'callback_data': 'stats_all'}],
                [{'text': 'üè¢ –°–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–∞–π–æ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª', 'callback_data': 'general_messages'}],
                [{'text': 'üìù –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è', 'callback_data': 'new_messages'}],
                [{'text': '‚è≥ –í —Ä–∞–±–æ—Ç–µ', 'callback_data': 'in_progress_messages'}],
                [{'text': '‚úÖ –†–µ—à–µ–Ω–Ω—ã–µ', 'callback_data': 'resolved_messages'}],
                [{'text': 'üè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∫–æ–ª–∞–º–∏', 'callback_data': 'manage_schools'}],
                [{'text': 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', 'callback_data': 'manage_users'}],
                [{'text': 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'callback_data': 'refresh'}]
            ]
        
        return keyboard
    
    def handle_callback_query(self, chat_id: int, callback_data: str, message_id: int) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback query"""
        try:
            user = User.objects.get(telegram_chat_id=chat_id)
        except User.DoesNotExist:
            self.bot.send_message(chat_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
            return
        
        if callback_data == 'stats_all':
            self.show_stats_all(chat_id, user, message_id)
        elif callback_data == 'stats_school':
            self.show_stats_school(chat_id, user, message_id)
        elif callback_data == 'general_messages':
            self.show_general_messages(chat_id, user, message_id)
        elif callback_data == 'new_messages':
            self.show_new_messages(chat_id, user, message_id)
        elif callback_data == 'in_progress_messages':
            self.show_in_progress_messages(chat_id, user, message_id)
        elif callback_data == 'resolved_messages':
            self.show_resolved_messages(chat_id, user, message_id)
        elif callback_data == 'refresh':
            self.send_main_menu(chat_id, user)
        elif callback_data.startswith('message_'):
            self.handle_message_action(chat_id, callback_data, user, message_id)
        elif callback_data.startswith('set_status_'):
            self.handle_set_status(chat_id, callback_data, user, message_id)
        elif callback_data.startswith('comment_'):
            self.handle_comment(chat_id, callback_data, user, message_id)
        elif callback_data == 'back_to_menu':
            self.send_main_menu(chat_id, user)
        else:
            self.bot.answer_callback_query(callback_data, "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def show_stats_all(self, chat_id: int, user: User, message_id: int) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        messages = Message.objects.all()
        
        stats_text = f"""
üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üî¥ –ù–æ–≤—ã—Ö: {messages.filter(status='new').count()}
üü° –í —Ä–∞–±–æ—Ç–µ: {messages.filter(status='in_progress').count()}
üü¢ –†–µ—à–µ–Ω–æ: {messages.filter(status='resolved').count()}
üìà –í—Å–µ–≥–æ: {messages.count()}

üìã <b>–ü–æ —Ç–∏–ø–∞–º –ø—Ä–æ–±–ª–µ–º:</b>
‚Ä¢ –ë—É–ª–ª–∏–Ω–≥: {messages.filter(problem_type='bullying').count()}
‚Ä¢ –í—ã–º–æ–≥–∞—Ç–µ–ª—å—Å—Ç–≤–æ: {messages.filter(problem_type='extortion').count()}
‚Ä¢ –ü—Ä–∏—Ç–µ—Å–Ω–µ–Ω–∏—è: {messages.filter(problem_type='harassment').count()}
‚Ä¢ –î—Ä—É–≥–∏–µ: {messages.filter(problem_type='other').count()}
        """
        
        keyboard = {
            'inline_keyboard': [
                [{'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'back_to_menu'}]
            ]
        }
        
        self.bot.edit_message(chat_id, message_id, stats_text, keyboard)
    
    def show_stats_school(self, chat_id: int, user: User, message_id: int) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —à–∫–æ–ª—ã"""
        if not user.school:
            self.bot.edit_message(chat_id, message_id, "‚ùå –®–∫–æ–ª–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞")
            return
            
        messages = Message.objects.filter(school=user.school)
        
        stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —à–∫–æ–ª—ã: {user.school.name}</b>

üî¥ –ù–æ–≤—ã—Ö: {messages.filter(status='new').count()}
üü° –í —Ä–∞–±–æ—Ç–µ: {messages.filter(status='in_progress').count()}
üü¢ –†–µ—à–µ–Ω–æ: {messages.filter(status='resolved').count()}
üìà –í—Å–µ–≥–æ: {messages.count()}
        """
        
        keyboard = {
            'inline_keyboard': [
                [{'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'back_to_menu'}]
            ]
        }
        
        self.bot.edit_message(chat_id, message_id, stats_text, keyboard)
    
    def show_new_messages(self, chat_id: int, user: User, message_id: int) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if user.role == 'teacher':
            messages = Message.objects.filter(school=user.school, status='new')
        else:
            messages = Message.objects.filter(status='new')
        
        if not messages.exists():
            text = "üìù <b>–ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç</b>"
            keyboard = {
                'inline_keyboard': [
                    [{'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'back_to_menu'}]
                ]
            }
        else:
            text = f"üìù <b>–ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ({messages.count()})</b>\n\n"
            keyboard = {'inline_keyboard': []}
            
            for message in messages[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                school_name = message.school.name if message.school else "–†–∞–π–æ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª"
                text += f"‚Ä¢ <b>#{message.id}</b> - {school_name}\n"
                text += f"  {message.problem[:50]}...\n"
                text += f"  <i>{message.created_at.strftime('%d.%m.%Y %H:%M')}</i>\n\n"
                
                keyboard['inline_keyboard'].append([
                    {'text': f'üìã #{message.id}', 'callback_data': f'message_{message.id}'}
                ])
            
            keyboard['inline_keyboard'].append([
                {'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'back_to_menu'}
            ])
        
        self.bot.edit_message(chat_id, message_id, text, keyboard)
    
    def handle_message_action(self, chat_id: int, callback_data: str, user: User, message_id: int) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
        try:
            message_id_from_callback = int(callback_data.split('_')[1])
            message = Message.objects.get(id=message_id_from_callback)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if user.role == 'teacher' and message.school != user.school:
                self.bot.answer_callback_query(callback_data, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é")
                return
            
            self.show_message_details(chat_id, message, user, message_id)
            
        except (ValueError, Message.DoesNotExist):
            self.bot.answer_callback_query(callback_data, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    def show_message_details(self, chat_id: int, message: Message, user: User, bot_message_id: int) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
        school_name = message.school.name if message.school else "–†–∞–π–æ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª"
        problem_type_display = dict(message.PROBLEM_TYPE_CHOICES).get(message.problem_type, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        status_display = dict(message.STATUS_CHOICES).get(message.status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        text = f"""
üìã <b>–°–æ–æ–±—â–µ–Ω–∏–µ #{message.id}</b>

üè´ <b>–®–∫–æ–ª–∞:</b> {school_name}
üìù <b>–¢–∏–ø:</b> {problem_type_display}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_display}
üìÖ <b>–î–∞—Ç–∞:</b> {message.created_at.strftime('%d.%m.%Y %H:%M')}

üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{message.problem}
        """
        
        keyboard = {
            'inline_keyboard': [
                [
                    {'text': '‚è≥ –í —Ä–∞–±–æ—Ç—É', 'callback_data': f'set_status_{message.id}_in_progress'},
                    {'text': '‚úÖ –†–µ—à–µ–Ω–æ', 'callback_data': f'set_status_{message.id}_resolved'}
                ],
                [{'text': 'üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', 'callback_data': f'comment_{message.id}'}],
                [{'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'back_to_menu'}]
            ]
        }
        
        self.bot.edit_message(chat_id, bot_message_id, text, keyboard)
    
    def handle_set_status(self, chat_id: int, callback_data: str, user: User, message_id: int) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ü–∞—Ä—Å–∏–º callback_data: set_status_{message_id}_{new_status}
            parts = callback_data.split('_')
            message_id_from_callback = int(parts[2])
            new_status = parts[3]
            
            message = Message.objects.get(id=message_id_from_callback)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if user.role == 'teacher' and message.school != user.school:
                self.bot.answer_callback_query(callback_data, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é")
                return
            
            # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
            old_status = message.status
            message.status = new_status
            message.save()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            status_display = dict(message.STATUS_CHOICES).get(new_status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            self.bot.answer_callback_query(callback_data, f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status_display}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.show_message_details(chat_id, message, user, message_id)
            
        except (ValueError, Message.DoesNotExist):
            self.bot.answer_callback_query(callback_data, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    def handle_comment(self, chat_id: int, callback_data: str, user: User, message_id: int) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        try:
            message_id_from_callback = int(callback_data.split('_')[1])
            message = Message.objects.get(id=message_id_from_callback)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if user.role == 'teacher' and message.school != user.school:
                self.bot.answer_callback_query(callback_data, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            if chat_id not in self.user_sessions:
                self.user_sessions[chat_id] = {}
            
            self.user_sessions[chat_id]['waiting_comment'] = message_id_from_callback
            self.user_sessions[chat_id]['state'] = 'waiting_comment'
            
            self.bot.answer_callback_query(callback_data, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
            self.bot.send_message(chat_id, "üí¨ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è</b>\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
            
        except (ValueError, Message.DoesNotExist):
            self.bot.answer_callback_query(callback_data, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    def handle_comment_text(self, chat_id: int, comment_text: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        if chat_id not in self.user_sessions or 'waiting_comment' not in self.user_sessions[chat_id]:
            return
        
        try:
            message_id = self.user_sessions[chat_id]['waiting_comment']
            message = Message.objects.get(id=message_id)
            user = User.objects.get(telegram_chat_id=chat_id)
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            from dashboard.models import InternalComment
            InternalComment.objects.create(
                message=message,
                author=user,
                content=comment_text
            )
            
            # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
            del self.user_sessions[chat_id]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            self.bot.send_message(chat_id, "‚úÖ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>")
            
        except (Message.DoesNotExist, User.DoesNotExist):
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
    
    def process_update(self, update: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram"""
        try:
            if 'message' in update:
                self.process_message(update['message'])
            elif 'callback_query' in update:
                self.process_callback_query(update['callback_query'])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    
    def process_message(self, message: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        chat_id = message['chat']['id']
        text = message.get('text', '')
        
        if text.startswith('/start'):
            self.handle_start(chat_id, message.get('from', {}))
        elif chat_id in self.user_sessions:
            state = self.user_sessions[chat_id]['state']
            if state == 'waiting_username':
                self.handle_username(chat_id, text)
            elif state == 'waiting_password':
                self.handle_password(chat_id, text)
            elif state == 'waiting_comment':
                self.handle_comment_text(chat_id, text)
    
    def process_callback_query(self, callback_query: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback query"""
        chat_id = callback_query['message']['chat']['id']
        callback_data = callback_query['data']
        message_id = callback_query['message']['message_id']
        query_id = callback_query['id']
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        self.bot.answer_callback_query(query_id)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        self.handle_callback_query(chat_id, callback_data, message_id)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
bot_handler = TelegramBotHandler()
