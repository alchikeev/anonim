import logging
import json
from typing import Dict, Any, Optional, List, Tuple
from django.conf import settings
from django.contrib.auth import authenticate
from django.contrib.auth import get_user_model
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
from django.utils.decorators import method_decorator
from django.views import View
from django.db.models import Q, Count, QuerySet
import requests
from .models import School
from dashboard.models import Message

User = get_user_model()
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
PAGINATION_SIZE = 5
REQUEST_TIMEOUT = 10
MAX_RETRIES = 3

# –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
ROLES = {
    'SUPER_ADMIN': 'super_admin',
    'RAYON_OTDEL': 'rayon_otdel', 
    'TEACHER': 'teacher'
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_STATES = {
    'WAITING_USERNAME': 'waiting_username',
    'WAITING_PASSWORD': 'waiting_password',
    'WAITING_COMMENT': 'waiting_comment'
}

# –°—Ç–∞—Ç—É—Å—ã —Å–æ–æ–±—â–µ–Ω–∏–π
MESSAGE_STATUSES = {
    'NEW': 'new',
    'IN_PROGRESS': 'in_progress',
    'RESOLVED': 'resolved'
}

class TelegramBot:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞"""
    
    def __init__(self):
        self.token = settings.TELEGRAM_BOT_TOKEN
        self.username = settings.TELEGRAM_BOT_USERNAME
        self.base_url = f"https://api.telegram.org/bot{self.token}"
        self.session = requests.Session()
        self.session.headers.update({
            'Content-Type': 'application/json',
            'User-Agent': 'AnonimMektepBot/1.0'
        })
        
    def _make_request(self, method: str, data: Dict[str, Any]) -> Optional[Dict]:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram API"""
        url = f"{self.base_url}/{method}"
        
        for attempt in range(MAX_RETRIES):
            try:
                response = self.session.post(url, json=data, timeout=REQUEST_TIMEOUT)
                response.raise_for_status()
                return response.json()
            except requests.exceptions.RequestException as e:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                if attempt == MAX_RETRIES - 1:
                    logger.error(f"–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è {method}: {e}")
                    return None
                    
        return None
        
    def send_message(self, chat_id: int, text: str, reply_markup: Optional[Dict] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        data = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'HTML',
            'disable_web_page_preview': True
        }
        
        if reply_markup:
            data['reply_markup'] = reply_markup
            
        result = self._make_request('sendMessage', data)
        return result is not None and result.get('ok', False)
    
    def edit_message(self, chat_id: int, message_id: int, text: str, reply_markup: Optional[Dict] = None) -> bool:
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        data = {
            'chat_id': chat_id,
            'message_id': message_id,
            'text': text,
            'parse_mode': 'HTML',
            'disable_web_page_preview': True
        }
        
        if reply_markup:
            data['reply_markup'] = reply_markup
            
        result = self._make_request('editMessageText', data)
        return result is not None and result.get('ok', False)
    
    def answer_callback_query(self, callback_query_id: str, text: str = None, show_alert: bool = False) -> bool:
        """–û—Ç–≤–µ—Ç –Ω–∞ callback query"""
        data = {
            'callback_query_id': callback_query_id,
            'show_alert': show_alert
        }
        
        if text:
            data['text'] = text
            
        result = self._make_request('answerCallbackQuery', data)
        return result is not None and result.get('ok', False)


class KeyboardBuilder:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    
    @staticmethod
    def create_reply_keyboard(buttons: List[List[str]]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        return {
            'keyboard': buttons,
            'resize_keyboard': True,
            'one_time_keyboard': False,
            'selective': False
        }
    
    @staticmethod
    def create_inline_keyboard(buttons: List[List[Dict[str, str]]]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        return {
            'inline_keyboard': buttons
        }
    
    @staticmethod
    def create_navigation_buttons(page: int, total_pages: int, callback_prefix: str) -> List[Dict[str, str]]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        if page > 1:
            buttons.append({'text': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data': f'{callback_prefix}_page_{page-1}'})
        else:
            buttons.append({'text': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data': 'disabled'})
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
        buttons.append({'text': 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', 'callback_data': 'back_to_menu'})
        
        # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
        if page < total_pages:
            buttons.append({'text': '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', 'callback_data': f'{callback_prefix}_page_{page+1}'})
        else:
            buttons.append({'text': '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', 'callback_data': 'disabled'})
        
        return buttons


class MessageFormatter:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    @staticmethod
    def format_message(message: Message) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        school_name = message.school.name if message.school else "–†–∞–π–æ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª"
        text = f"‚Ä¢ <b>#{message.id}</b> - {school_name}\n"
        text += f"  {message.problem[:50]}...\n"
        text += f"  <i>{message.created_at.strftime('%d.%m.%Y %H:%M')}</i>"
        return text
    
    @staticmethod
    def format_school(school: School, base_url: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        from dashboard.models import Message
        messages_count = Message.objects.filter(school=school).count()
        
        school_url = f"{base_url}/send/{school.unique_code}/"
        text = f"‚Ä¢ <b>{school.name}</b>\n"
        text += f"  –°—Å—ã–ª–∫–∞: {school_url}\n"
        text += f"  –£—á–∏—Ç–µ–ª–µ–π: {school.users.filter(role=ROLES['TEACHER']).count()}\n"
        text += f"  –°–æ–æ–±—â–µ–Ω–∏–π: {messages_count}"
        return text


class DatabaseOptimizer:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    @staticmethod
    def get_user_with_relations(telegram_chat_id: int) -> Optional[User]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏"""
        return User.objects.select_related('school').filter(
            telegram_chat_id=telegram_chat_id
        ).first()
    
    @staticmethod
    def get_messages_with_relations(status: str = None, school: School = None) -> QuerySet:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏"""
        queryset = Message.objects.select_related('school', 'user').prefetch_related('comments')
        
        if status:
            queryset = queryset.filter(status=status)
        if school:
            queryset = queryset.filter(school=school)
            
        return queryset.order_by('-created_at')
    
    @staticmethod
    def get_schools_with_stats() -> QuerySet:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —à–∫–æ–ª —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        return School.objects.annotate(
            teachers_count=Count('users', filter=Q(users__role=ROLES['TEACHER'])),
            messages_count=Count('message')
        ).order_by('name')


class TelegramBotHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram –±–æ—Ç–∞"""
    
    def __init__(self):
        self.bot = TelegramBot()
        self.user_sessions = {}  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.cleanup_duplicate_users()  # –û—á–∏—â–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    
    def cleanup_duplicate_users(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º telegram_chat_id"""
        try:
            from django.db.models import Count
            from core.models import User
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º–∏—Å—è telegram_chat_id
            duplicates = User.objects.values('telegram_chat_id').annotate(
                count=Count('telegram_chat_id')
            ).filter(count__gt=1, telegram_chat_id__isnull=False)
            
            for duplicate in duplicates:
                chat_id = duplicate['telegram_chat_id']
                users = User.objects.filter(telegram_chat_id=chat_id).order_by('id')
                
                # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å—Ç–∞–ª—å–Ω—ã–º —É–±–∏—Ä–∞–µ–º telegram_chat_id
                for i, user in enumerate(users):
                    if i > 0:  # –í—Å–µ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ
                        user.telegram_chat_id = None
                        user.save()
                        print(f"–û—á–∏—â–µ–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è telegram_chat_id —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} (ID: {user.id})")
            
            if duplicates:
                print(f"–û—á–∏—â–µ–Ω–æ {len(duplicates)} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è telegram_chat_id")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        
    def handle_start(self, chat_id: int, user_data: Dict) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–Ω–æ–Ω–∏–º –ú–µ–∫—Ç–µ–ø!</b>

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è–º–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.

–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–ª–æ–≥–∏–Ω</b>:
        """
        
        self.bot.send_message(chat_id, welcome_text)
        self.user_sessions[chat_id] = {'state': 'waiting_username'}
        
    def handle_username(self, chat_id: int, username: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞"""
        if chat_id not in self.user_sessions:
            self.handle_start(chat_id, {})
            return
            
        self.user_sessions[chat_id]['username'] = username
        self.user_sessions[chat_id]['state'] = 'waiting_password'
        
        self.bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–ø–∞—Ä–æ–ª—å</b>:")
        
    def handle_password(self, chat_id: int, password: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
        if chat_id not in self.user_sessions or 'username' not in self.user_sessions[chat_id]:
            self.handle_start(chat_id, {})
            return
            
        username = self.user_sessions[chat_id]['username']
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        user = authenticate(username=username, password=password)
        
        if user and user.role in ['super_admin', 'rayon_otdel', 'teacher']:
            # –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —ç—Ç–∏–º telegram_chat_id
            existing_user = User.objects.filter(telegram_chat_id=chat_id).first()
            
            if existing_user and existing_user.id != user.id:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —ç—Ç–∏–º chat_id, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
                existing_user.telegram_chat_id = None
                existing_user.save()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.telegram_chat_id = chat_id
            user.save()
            
            # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
            del self.user_sessions[chat_id]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            self.send_main_menu(chat_id, user)
            
        else:
            # –ù–µ—É–¥–∞—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            self.bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é —à–∫–æ–ª—ã –∏/–∏–ª–∏ –≤ —Ä–∞–π–æ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è.")
            self.user_sessions[chat_id]['state'] = 'waiting_username'
            self.bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–ª–æ–≥–∏–Ω</b>:")
    
    def send_main_menu(self, chat_id: int, user: User) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        role_display = user.get_role_display()
        
        if user.role == 'teacher':
            school_name = user.school.name if user.school else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞"
            menu_text = f"""
üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.get_full_name() or user.username}!</b>

üìã <b>–í–∞—à–∞ —Ä–æ–ª—å:</b> {role_display}
üè´ <b>–®–∫–æ–ª–∞:</b> {school_name}

–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /start
            """
        else:
            menu_text = f"""
üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.get_full_name() or user.username}!</b>

üìã <b>–í–∞—à–∞ —Ä–æ–ª—å:</b> {role_display}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
            """
        
        keyboard = self.get_main_menu_keyboard(user)
        self.bot.send_message(chat_id, menu_text, keyboard)
    
    def get_main_menu_keyboard(self, user: User) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if user.role == ROLES['TEACHER']:
            buttons = [
                ['üìù –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è'],
                ['üìù –ù–æ–≤—ã–µ', '‚è≥ –í —Ä–∞–±–æ—Ç–µ', '‚úÖ –†–µ—à–µ–Ω–æ'],
                ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üîó –°—Å—ã–ª–∫–∞ —à–∫–æ–ª—ã']
            ]
        else:  # super_admin –∏–ª–∏ rayon_otdel
            buttons = [
                ['üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
                ['üè¢ –†–∞–π–û–û', 'üè´ –®–∫–æ–ª—ã'],
                ['üìù –ù–æ–≤—ã–µ', '‚è≥ –í —Ä–∞–±–æ—Ç–µ', '‚úÖ –†–µ—à–µ–Ω–æ'],
                ['üë• –£—á–∏—Ç–µ–ª—è', 'üë®‚Äçüíº –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏']
            ]
        
        return KeyboardBuilder.create_reply_keyboard(buttons)
    
    def handle_text_message(self, chat_id: int, text: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = DatabaseOptimizer.get_user_with_relations(chat_id)
        if not user:
            self.bot.send_message(chat_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ —Ç–µ–∫—Å—Ç—É
        if text == 'üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            self.show_stats_all(chat_id, user)
        elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            if user.role == 'teacher':
                self.show_stats_school(chat_id, user)
            else:
                self.show_stats_all(chat_id, user)
        elif text == 'üè¢ –†–∞–π–û–û':
            self.show_general_messages(chat_id, user)
        elif text == 'üè´ –®–∫–æ–ª—ã':
            if user.role in ['super_admin', 'rayon_otdel']:
                self.show_schools(chat_id, user)
            else:
                self.show_school_messages(chat_id, user)
        elif text == 'üìù –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è':
            self.show_all_messages(chat_id, user)
        elif text == 'üìù –ù–æ–≤—ã–µ':
            self.show_new_messages(chat_id, user)
        elif text == '‚è≥ –í —Ä–∞–±–æ—Ç–µ':
            self.show_in_progress_messages(chat_id, user)
        elif text == '‚úÖ –†–µ—à–µ–Ω–æ':
            self.show_resolved_messages(chat_id, user)
        elif text == 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å':
            self.send_main_menu(chat_id, user)
        elif text == 'üîó –°—Å—ã–ª–∫–∞ —à–∫–æ–ª—ã':
            self.show_school_link(chat_id, user)
        elif text == 'üë• –£—á–∏—Ç–µ–ª—è':
            self.manage_teachers(chat_id, user)
        elif text == 'üë®‚Äçüíº –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏':
            self.manage_staff(chat_id, user)
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if chat_id in self.user_sessions:
                state = self.user_sessions[chat_id]['state']
                if state == USER_STATES['WAITING_USERNAME']:
                    self.handle_username(chat_id, text)
                elif state == USER_STATES['WAITING_PASSWORD']:
                    self.handle_password(chat_id, text)
                elif state == USER_STATES['WAITING_COMMENT']:
                    self.handle_comment_text(chat_id, text)
                else:
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    self.send_main_menu(chat_id, user)
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–µ—Å—Å–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                self.send_main_menu(chat_id, user)
    
    def handle_callback_query(self, chat_id: int, callback_data: str, message_id: int, query_id: str = None) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback query (–¥–ª—è inline –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö)"""
        user = DatabaseOptimizer.get_user_with_relations(chat_id)
        if not user:
            self.bot.send_message(chat_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
            return
        
        if callback_data.startswith('message_'):
            self.handle_message_action(chat_id, callback_data, user, message_id, query_id)
        elif callback_data.startswith('set_status_'):
            self.handle_set_status(chat_id, callback_data, user, message_id, query_id)
        elif callback_data.startswith('comment_'):
            self.handle_comment(chat_id, callback_data, user, message_id, query_id)
        elif callback_data == 'back_to_menu':
            self.send_main_menu(chat_id, user)
        elif callback_data == 'disabled':
            self.bot.answer_callback_query(query_id, "–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        elif callback_data.startswith('general_page_'):
            page = int(callback_data.split('_')[2])
            self.show_general_messages(chat_id, user, page)
        elif callback_data.startswith('in_progress_page_'):
            page = int(callback_data.split('_')[2])
            self.show_in_progress_messages(chat_id, user, page)
        elif callback_data.startswith('resolved_page_'):
            page = int(callback_data.split('_')[2])
            self.show_resolved_messages(chat_id, user, page)
        elif callback_data.startswith('new_page_'):
            page = int(callback_data.split('_')[2])
            self.show_new_messages(chat_id, user, page)
        elif callback_data.startswith('schools_page_'):
            page = int(callback_data.split('_')[2])
            self.show_schools(chat_id, user, page)
        elif callback_data.startswith('teachers_page_'):
            page = int(callback_data.split('_')[2])
            self.show_teachers(chat_id, user, page)
        elif callback_data.startswith('staff_page_'):
            page = int(callback_data.split('_')[2])
            self.show_staff(chat_id, user, page)
        elif callback_data.startswith('school_stats_'):
            school_id = int(callback_data.split('_')[2])
            self.show_school_statistics(chat_id, user, school_id)
        elif callback_data.startswith('school_teachers_'):
            school_id = int(callback_data.split('_')[2])
            self.show_school_teachers(chat_id, user, school_id)
        elif callback_data.startswith('school_messages_'):
            school_id = int(callback_data.split('_')[2])
            self.show_school_messages_by_id(chat_id, user, school_id)
        elif callback_data == 'back_to_schools':
            self.show_schools(chat_id, user)
        else:
            self.bot.answer_callback_query(query_id, "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def show_stats_all(self, chat_id: int, user: User, message_id: int = None) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        messages = Message.objects.all()
        
        stats_text = f"""
üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üî¥ –ù–æ–≤—ã—Ö: {messages.filter(status='new').count()}
üü° –í —Ä–∞–±–æ—Ç–µ: {messages.filter(status='in_progress').count()}
üü¢ –†–µ—à–µ–Ω–æ: {messages.filter(status='resolved').count()}
üìà –í—Å–µ–≥–æ: {messages.count()}

üìã <b>–ü–æ —Ç–∏–ø–∞–º –ø—Ä–æ–±–ª–µ–º:</b>
‚Ä¢ –ë—É–ª–ª–∏–Ω–≥: {messages.filter(problem_type='bullying').count()}
‚Ä¢ –í—ã–º–æ–≥–∞—Ç–µ–ª—å—Å—Ç–≤–æ: {messages.filter(problem_type='extortion').count()}
‚Ä¢ –ü—Ä–∏—Ç–µ—Å–Ω–µ–Ω–∏—è: {messages.filter(problem_type='harassment').count()}
‚Ä¢ –î—Ä—É–≥–∏–µ: {messages.filter(problem_type='other').count()}
        """
        
        keyboard = {
            'inline_keyboard': [
                [{'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'back_to_menu'}]
            ]
        }
        
        self.bot.send_message(chat_id, stats_text, keyboard)
    
    def show_stats_school(self, chat_id: int, user: User, message_id: int = None) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —à–∫–æ–ª—ã"""
        if not user.school:
            self.bot.send_message(chat_id, "‚ùå –®–∫–æ–ª–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞")
            return
            
        messages = Message.objects.filter(school=user.school)
        
        stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —à–∫–æ–ª—ã: {user.school.name}</b>

üî¥ –ù–æ–≤—ã—Ö: {messages.filter(status='new').count()}
üü° –í —Ä–∞–±–æ—Ç–µ: {messages.filter(status='in_progress').count()}
üü¢ –†–µ—à–µ–Ω–æ: {messages.filter(status='resolved').count()}
üìà –í—Å–µ–≥–æ: {messages.count()}
        """
        
        keyboard = {
            'inline_keyboard': [
                [{'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'back_to_menu'}]
            ]
        }
        
        self.bot.send_message(chat_id, stats_text, keyboard)
    
    def show_general_messages(self, chat_id: int, user: User, page: int = 1) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–∞–π–æ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        messages = Message.objects.filter(school__isnull=True).order_by('-created_at')
        self.show_messages_with_pagination(chat_id, user, messages, "–°–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–∞–π–æ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª", page, "general")
    
    def show_messages_with_pagination(self, chat_id: int, user: User, messages, title: str, page: int = 1, callback_prefix: str = 'messages') -> None:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        if not messages.exists():
            text = f"üìù <b>{title} –Ω–µ—Ç</b>"
            keyboard = KeyboardBuilder.create_inline_keyboard([
                [{'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'back_to_menu'}]
            ])
            self.bot.send_message(chat_id, text, keyboard)
        else:
            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            total_pages = (messages.count() + PAGINATION_SIZE - 1) // PAGINATION_SIZE
            start_idx = (page - 1) * PAGINATION_SIZE
            end_idx = start_idx + PAGINATION_SIZE
            
            page_messages = messages[start_idx:end_idx]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            header_text = f"üìù <b>{title} (—Å—Ç—Ä. {page}/{total_pages})</b>"
            self.bot.send_message(chat_id, header_text)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
            for message in page_messages:
                text = MessageFormatter.format_message(message)
                keyboard = KeyboardBuilder.create_inline_keyboard([
                    [{'text': f'üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ #{message.id}', 'callback_data': f'message_{message.id}'}]
                ])
                self.bot.send_message(chat_id, text, keyboard)
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            navigation_buttons = KeyboardBuilder.create_navigation_buttons(page, total_pages, callback_prefix)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            navigation_text = f"üìÑ –ù–∞–≤–∏–≥–∞—Ü–∏—è ({page} —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑ {total_pages})"
            navigation_keyboard = KeyboardBuilder.create_inline_keyboard([navigation_buttons])
            self.bot.send_message(chat_id, navigation_text, navigation_keyboard)
    
    def show_in_progress_messages(self, chat_id: int, user: User, page: int = 1) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–∞–±–æ—Ç–µ"""
        if user.role == ROLES['TEACHER']:
            messages = DatabaseOptimizer.get_messages_with_relations(MESSAGE_STATUSES['IN_PROGRESS'], user.school)
        else:
            messages = DatabaseOptimizer.get_messages_with_relations(MESSAGE_STATUSES['IN_PROGRESS'])
        
        self.show_messages_with_pagination(chat_id, user, messages, "‚è≥ –°–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–∞–±–æ—Ç–µ", page, "in_progress")
    
    def show_resolved_messages(self, chat_id: int, user: User, page: int = 1) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—à–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if user.role == 'teacher':
            messages = Message.objects.filter(school=user.school, status='resolved').order_by('-created_at')
        else:
            messages = Message.objects.filter(status='resolved').order_by('-created_at')
        
        self.show_messages_with_pagination(chat_id, user, messages, "‚úÖ –†–µ—à–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", page, "resolved")
    
    def show_new_messages(self, chat_id: int, user: User, page: int = 1) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if user.role == 'teacher':
            messages = Message.objects.filter(school=user.school, status='new').order_by('-created_at')
        else:
            messages = Message.objects.filter(status='new').order_by('-created_at')
        
        self.show_messages_with_pagination(chat_id, user, messages, "üìù –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", page, "new")
    
    def show_all_messages(self, chat_id: int, user: User) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è —É—á–∏—Ç–µ–ª–µ–π - –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —à–∫–æ–ª—ã, —Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ)"""
        if user.role == 'teacher':
            # –î–ª—è —É—á–∏—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —à–∫–æ–ª—ã, —Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ
            messages = Message.objects.filter(school=user.school).order_by('-created_at')
            self.show_messages_with_pagination(chat_id, user, messages, "–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —à–∫–æ–ª—ã", 1, "all")
        else:
            # –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = Message.objects.all().order_by('-created_at')
            self.show_messages_with_pagination(chat_id, user, messages, "–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è", 1, "all")
    
    def show_school_messages(self, chat_id: int, user: User) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —à–∫–æ–ª–∞–º"""
        messages = Message.objects.filter(school__isnull=False).order_by('-created_at')
        
        if not messages.exists():
            text = "üìù <b>–°–æ–æ–±—â–µ–Ω–∏–π –≤ —à–∫–æ–ª—ã –Ω–µ—Ç</b>"
        else:
            text = f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏—è –≤ —à–∫–æ–ª—ã ({messages.count()})</b>\n\n"
            for message in messages[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                text += f"‚Ä¢ <b>#{message.id}</b> - {message.school.name}\n"
                text += f"  {message.problem[:50]}...\n"
                text += f"  –°—Ç–∞—Ç—É—Å: {message.get_status_display()}\n\n"
        
        keyboard = {
            'inline_keyboard': [
                [{'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'back_to_menu'}]
            ]
        }
        
        self.bot.send_message(chat_id, text, keyboard)
    
    def show_schools(self, chat_id: int, user: User, page: int = 1) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —à–∫–æ–ª—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        if user.role not in ['super_admin', 'rayon_otdel']:
            self.bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —à–∫–æ–ª")
            return
        
        schools = School.objects.all().order_by('name')
        
        if not schools.exists():
            text = "üè´ <b>–®–∫–æ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>"
            keyboard = {
                'inline_keyboard': [
                    [{'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'back_to_menu'}]
                ]
            }
            self.bot.send_message(chat_id, text, keyboard)
        else:
            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            per_page = 5
            total_pages = (schools.count() + per_page - 1) // per_page
            start_idx = (page - 1) * per_page
            end_idx = start_idx + per_page
            
            page_schools = schools[start_idx:end_idx]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            header_text = f"üè´ <b>–®–∫–æ–ª—ã (—Å—Ç—Ä. {page}/{total_pages})</b>"
            self.bot.send_message(chat_id, header_text)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —à–∫–æ–ª—É –æ—Ç–¥–µ–ª—å–Ω–æ
            for school in page_schools:
                # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π URL –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                from django.conf import settings
                base_url = getattr(settings, 'BASE_URL', 'http://127.0.0.1:8000')
                school_url = f"{base_url}/send/{school.unique_code}/"
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —à–∫–æ–ª—ã
                from dashboard.models import Message
                messages_count = Message.objects.filter(school=school).count()
                
                text = f"‚Ä¢ <b>{school.name}</b>\n"
                text += f"  –°—Å—ã–ª–∫–∞: {school_url}\n"
                text += f"  –£—á–∏—Ç–µ–ª–µ–π: {school.users.filter(role='teacher').count()}\n"
                text += f"  –°–æ–æ–±—â–µ–Ω–∏–π: {messages_count}"
                
                keyboard = {
                    'inline_keyboard': [
                        [
                            {'text': f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'callback_data': f'school_stats_{school.id}'},
                            {'text': f'üë• –£—á–∏—Ç–µ–ª—è', 'callback_data': f'school_teachers_{school.id}'},
                            {'text': f'üìù –°–æ–æ–±—â–µ–Ω–∏—è', 'callback_data': f'school_messages_{school.id}'}
                        ]
                    ]
                }
                
                self.bot.send_message(chat_id, text, keyboard)
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            navigation_buttons = []
            
            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" (–ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
            if page > 1:
                navigation_buttons.append({'text': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data': f'schools_page_{page-1}'})
            else:
                navigation_buttons.append({'text': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data': 'disabled'})
            
            # –ö–Ω–æ–ø–∫–∞ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
            navigation_buttons.append({'text': 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', 'callback_data': 'back_to_menu'})
            
            # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" (—Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
            if page < total_pages:
                navigation_buttons.append({'text': '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', 'callback_data': f'schools_page_{page+1}'})
            else:
                navigation_buttons.append({'text': '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', 'callback_data': 'disabled'})
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            navigation_text = f"üìÑ –ù–∞–≤–∏–≥–∞—Ü–∏—è ({page} —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑ {total_pages})"
            navigation_keyboard = {
                'inline_keyboard': [navigation_buttons]
            }
            self.bot.send_message(chat_id, navigation_text, navigation_keyboard)
    
    def show_teachers(self, chat_id: int, user: User, page: int = 1) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —É—á–∏—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        if user.role not in ['super_admin', 'rayon_otdel']:
            self.bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∏—Ç–µ–ª–µ–π")
            return
        
        teachers = User.objects.filter(role='teacher').select_related('school').order_by('school__name', 'username')
        
        if not teachers.exists():
            text = "üë• <b>–£—á–∏—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>"
            keyboard = {
                'inline_keyboard': [
                    [{'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'back_to_menu'}]
                ]
            }
            self.bot.send_message(chat_id, text, keyboard)
        else:
            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            per_page = 5
            total_pages = (teachers.count() + per_page - 1) // per_page
            start_idx = (page - 1) * per_page
            end_idx = start_idx + per_page
            
            page_teachers = teachers[start_idx:end_idx]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            header_text = f"üë• <b>–£—á–∏—Ç–µ–ª—è (—Å—Ç—Ä. {page}/{total_pages})</b>"
            self.bot.send_message(chat_id, header_text)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–≥–æ —É—á–∏—Ç–µ–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ
            for teacher in page_teachers:
                school_name = teacher.school.name if teacher.school else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞"
                text = f"‚Ä¢ <b>{teacher.get_full_name() or teacher.username}</b>\n"
                text += f"  –®–∫–æ–ª–∞: {school_name}\n"
                text += f"  –ê–∫—Ç–∏–≤–µ–Ω: {'‚úÖ' if teacher.is_active else '‚ùå'}"
                
                self.bot.send_message(chat_id, text)
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            navigation_buttons = []
            
            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" (–ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
            if page > 1:
                navigation_buttons.append({'text': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data': f'teachers_page_{page-1}'})
            else:
                navigation_buttons.append({'text': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data': 'disabled'})
            
            # –ö–Ω–æ–ø–∫–∞ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
            navigation_buttons.append({'text': 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', 'callback_data': 'back_to_menu'})
            
            # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" (—Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
            if page < total_pages:
                navigation_buttons.append({'text': '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', 'callback_data': f'teachers_page_{page+1}'})
            else:
                navigation_buttons.append({'text': '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', 'callback_data': 'disabled'})
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            navigation_text = f"üìÑ –ù–∞–≤–∏–≥–∞—Ü–∏—è ({page} —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑ {total_pages})"
            navigation_keyboard = {
                'inline_keyboard': [navigation_buttons]
            }
            self.bot.send_message(chat_id, navigation_text, navigation_keyboard)
    
    def manage_teachers(self, chat_id: int, user: User) -> None:
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—è–º–∏ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ show_teachers"""
        self.show_teachers(chat_id, user)
    
    def show_staff(self, chat_id: int, user: User, page: int = 1) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Ä–∞–π–æ–Ω–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        if user.role not in ['super_admin', 'rayon_otdel']:
            self.bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
            return
        
        staff = User.objects.filter(role='rayon_otdel').order_by('username')
        
        if not staff.exists():
            text = "üë®‚Äçüíº <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>"
            keyboard = {
                'inline_keyboard': [
                    [{'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'back_to_menu'}]
                ]
            }
            self.bot.send_message(chat_id, text, keyboard)
        else:
            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            per_page = 5
            total_pages = (staff.count() + per_page - 1) // per_page
            start_idx = (page - 1) * per_page
            end_idx = start_idx + per_page
            
            page_staff = staff[start_idx:end_idx]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            header_text = f"üë®‚Äçüíº <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –†–∞–π–û–û (—Å—Ç—Ä. {page}/{total_pages})</b>"
            self.bot.send_message(chat_id, header_text)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
            for person in page_staff:
                text = f"‚Ä¢ <b>{person.get_full_name() or person.username}</b>\n"
                text += f"  –ê–∫—Ç–∏–≤–µ–Ω: {'‚úÖ' if person.is_active else '‚ùå'}"
                
                self.bot.send_message(chat_id, text)
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            navigation_buttons = []
            
            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" (–ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
            if page > 1:
                navigation_buttons.append({'text': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data': f'staff_page_{page-1}'})
            else:
                navigation_buttons.append({'text': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data': 'disabled'})
            
            # –ö–Ω–æ–ø–∫–∞ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
            navigation_buttons.append({'text': 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', 'callback_data': 'back_to_menu'})
            
            # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" (—Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
            if page < total_pages:
                navigation_buttons.append({'text': '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', 'callback_data': f'staff_page_{page+1}'})
            else:
                navigation_buttons.append({'text': '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', 'callback_data': 'disabled'})
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            navigation_text = f"üìÑ –ù–∞–≤–∏–≥–∞—Ü–∏—è ({page} —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑ {total_pages})"
            navigation_keyboard = {
                'inline_keyboard': [navigation_buttons]
            }
            self.bot.send_message(chat_id, navigation_text, navigation_keyboard)
    
    def manage_staff(self, chat_id: int, user: User) -> None:
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ show_staff"""
        self.show_staff(chat_id, user)
    
    def show_school_link(self, chat_id: int, user: User) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É —à–∫–æ–ª—ã –¥–ª—è —É—á–∏—Ç–µ–ª—è"""
        if user.role != 'teacher' or not user.school:
            self.bot.send_message(chat_id, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—è–º —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π —à–∫–æ–ª–æ–π.")
            return
        
        from django.conf import settings
        base_url = getattr(settings, 'BASE_URL', 'http://127.0.0.1:8000')
        school_url = f"{base_url}/send/{user.school.unique_code}/"
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç
        general_url = f"{base_url}/"
        
        text = f"""
üìù <b>–°–∞–ª–∞–º! üëã</b>

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º, –≤—ã –º–æ–∂–µ—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω–æ —Å–æ–æ–±—â–∏—Ç—å –æ –Ω–∏—Ö —á–µ—Ä–µ–∑ –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É –ê–Ω–æ–Ω–∏–º –ú–µ–∫—Ç–µ–ø:

–í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:
{school_url}

–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å –Ω–∞—à –æ–±—â–∏–π —Å–∞–π—Ç:
{general_url}

–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ –∏ –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç—è—Ç –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
{user.school.name}
        """
        
        keyboard = {
            'inline_keyboard': [
                [{'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'back_to_menu'}]
            ]
        }
        
        self.bot.send_message(chat_id, text, keyboard)
    
    def handle_message_action(self, chat_id: int, callback_data: str, user: User, message_id: int, query_id: str = None) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
        try:
            message_id_from_callback = int(callback_data.split('_')[1])
            message = Message.objects.get(id=message_id_from_callback)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if user.role == 'teacher' and message.school != user.school:
                self.bot.answer_callback_query(query_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é")
                return
            
            self.show_message_details(chat_id, message, user, message_id)
            
        except (ValueError, Message.DoesNotExist):
            self.bot.answer_callback_query(query_id, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    def show_message_details(self, chat_id: int, message: Message, user: User, bot_message_id: int) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
        school_name = message.school.name if message.school else "–†–∞–π–æ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª"
        problem_type_display = dict(message.PROBLEM_TYPE_CHOICES).get(message.problem_type, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        status_display = dict(message.STATUS_CHOICES).get(message.status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        text = f"""
üìã <b>–°–æ–æ–±—â–µ–Ω–∏–µ #{message.id}</b>

üè´ <b>–®–∫–æ–ª–∞:</b> {school_name}
üìù <b>–¢–∏–ø:</b> {problem_type_display}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_display}
üìÖ <b>–î–∞—Ç–∞:</b> {message.created_at.strftime('%d.%m.%Y %H:%M')}

üìÑ <b>–ü—Ä–æ–±–ª–µ–º–∞:</b>
{message.problem}
        """
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –ø–æ–º–æ—â—å, –µ—Å–ª–∏ –µ—Å—Ç—å
        if message.help:
            text += f"\n\nü§ù <b>–û–∂–∏–¥–∞–µ–º–∞—è –ø–æ–º–æ—â—å:</b>\n{message.help}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
        if message.contact:
            text += f"\n\nüìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n{message.contact}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        comments = message.comments.all().order_by('created_at')
        if comments.exists():
            text += f"\n\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ({comments.count()}):</b>"
            for comment in comments:
                author_name = comment.author.username if comment.author else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                text += f"\n\nüë§ <b>{author_name}</b> ({comment.created_at.strftime('%d.%m.%Y %H:%M')}):"
                text += f"\n{comment.text}"
        
        keyboard = {
            'inline_keyboard': [
                [
                    {'text': '‚è≥ –í —Ä–∞–±–æ—Ç—É', 'callback_data': f'set_status_{message.id}_in_progress'},
                    {'text': '‚úÖ –†–µ—à–µ–Ω–æ', 'callback_data': f'set_status_{message.id}_resolved'}
                ],
                [{'text': 'üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', 'callback_data': f'comment_{message.id}'}]
            ]
        }
        
        self.bot.edit_message(chat_id, bot_message_id, text, keyboard)
    
    def handle_set_status(self, chat_id: int, callback_data: str, user: User, message_id: int, query_id: str = None) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ü–∞—Ä—Å–∏–º callback_data: set_status_{message_id}_{new_status}
            parts = callback_data.split('_')
            message_id_from_callback = int(parts[2])
            new_status = parts[3]
            
            message = Message.objects.get(id=message_id_from_callback)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if user.role == 'teacher' and message.school != user.school:
                self.bot.answer_callback_query(query_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é")
                return
            
            # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
            old_status = message.status
            message.status = new_status
            message.save()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            status_display = dict(message.STATUS_CHOICES).get(new_status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            self.bot.answer_callback_query(query_id, f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status_display}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.show_message_details(chat_id, message, user, message_id)
            
        except (ValueError, Message.DoesNotExist):
            self.bot.answer_callback_query(query_id, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    def handle_comment(self, chat_id: int, callback_data: str, user: User, message_id: int, query_id: str = None) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        try:
            message_id_from_callback = int(callback_data.split('_')[1])
            message = Message.objects.get(id=message_id_from_callback)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if user.role == 'teacher' and message.school != user.school:
                self.bot.answer_callback_query(query_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            if chat_id not in self.user_sessions:
                self.user_sessions[chat_id] = {}
            
            self.user_sessions[chat_id]['waiting_comment'] = message_id_from_callback
            self.user_sessions[chat_id]['state'] = 'waiting_comment'
            
            self.bot.answer_callback_query(query_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
            self.bot.send_message(chat_id, "üí¨ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è</b>\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
            
        except (ValueError, Message.DoesNotExist):
            self.bot.answer_callback_query(query_id, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    def handle_comment_text(self, chat_id: int, comment_text: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        if chat_id not in self.user_sessions or 'waiting_comment' not in self.user_sessions[chat_id]:
            return
        
        try:
            message_id = self.user_sessions[chat_id]['waiting_comment']
            message = Message.objects.get(id=message_id)
            user = User.objects.filter(telegram_chat_id=chat_id).first()
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            from dashboard.models import InternalComment
            InternalComment.objects.create(
                message=message,
                author=user,
                text=comment_text
            )
            
            # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
            del self.user_sessions[chat_id]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            self.bot.send_message(chat_id, "‚úÖ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>")
            self.send_main_menu(chat_id, user)
            
        except (Message.DoesNotExist, User.DoesNotExist):
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
    
    def show_school_statistics(self, chat_id: int, user: User, school_id: int) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —à–∫–æ–ª—ã"""
        try:
            school = School.objects.get(id=school_id)
        except School.DoesNotExist:
            self.bot.send_message(chat_id, "‚ùå –®–∫–æ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —à–∫–æ–ª–µ
        messages = Message.objects.filter(school=school)
        new_count = messages.filter(status='new').count()
        in_progress_count = messages.filter(status='in_progress').count()
        resolved_count = messages.filter(status='resolved').count()
        total_count = messages.count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∏—Ç–µ–ª–µ–π
        teachers_count = school.users.filter(role='teacher', is_active=True).count()
        
        text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —à–∫–æ–ª—ã: {school.name}</b>\n\n"
        text += f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏—è:</b>\n"
        text += f"  ‚Ä¢ –í—Å–µ–≥–æ: {total_count}\n"
        text += f"  ‚Ä¢ –ù–æ–≤—ã–µ: {new_count}\n"
        text += f"  ‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: {in_progress_count}\n"
        text += f"  ‚Ä¢ –†–µ—à–µ–Ω–æ: {resolved_count}\n\n"
        text += f"üë• <b>–£—á–∏—Ç–µ–ª—è:</b> {teachers_count}"
        
        keyboard = {
            'inline_keyboard': [
                [{'text': 'üîô –ù–∞–∑–∞–¥ –∫ —à–∫–æ–ª–∞–º', 'callback_data': 'back_to_schools'}]
            ]
        }
        
        self.bot.send_message(chat_id, text, keyboard)
    
    def show_school_teachers(self, chat_id: int, user: User, school_id: int) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —É—á–∏—Ç–µ–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —à–∫–æ–ª—ã"""
        try:
            school = School.objects.get(id=school_id)
        except School.DoesNotExist:
            self.bot.send_message(chat_id, "‚ùå –®–∫–æ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        teachers = school.users.filter(role='teacher').order_by('username')
        
        if not teachers.exists():
            text = f"üë• <b>–£—á–∏—Ç–µ–ª—è —à–∫–æ–ª—ã: {school.name}</b>\n\n‚ùå –£—á–∏—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        else:
            text = f"üë• <b>–£—á–∏—Ç–µ–ª—è —à–∫–æ–ª—ã: {school.name}</b>\n\n"
            for teacher in teachers:
                text += f"‚Ä¢ <b>{teacher.get_full_name() or teacher.username}</b>\n"
                text += f"  –ê–∫—Ç–∏–≤–µ–Ω: {'‚úÖ' if teacher.is_active else '‚ùå'}\n\n"
        
        keyboard = {
            'inline_keyboard': [
                [{'text': 'üîô –ù–∞–∑–∞–¥ –∫ —à–∫–æ–ª–∞–º', 'callback_data': 'back_to_schools'}]
            ]
        }
        
        self.bot.send_message(chat_id, text, keyboard)
    
    def show_school_messages_by_id(self, chat_id: int, user: User, school_id: int) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —à–∫–æ–ª—ã"""
        try:
            school = School.objects.get(id=school_id)
        except School.DoesNotExist:
            self.bot.send_message(chat_id, "‚ùå –®–∫–æ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        messages = Message.objects.filter(school=school).order_by('-created_at')
        
        if not messages.exists():
            self.bot.send_message(chat_id, f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏—è —à–∫–æ–ª—ã {school.name}</b>\n\n–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")
            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            back_keyboard = {'inline_keyboard': [[{'text': 'üîô –ù–∞–∑–∞–¥ –∫ —à–∫–æ–ª–∞–º', 'callback_data': f'schools_page_1'}]]}
            self.bot.send_message(chat_id, "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∫–æ–ª–∞–º:", back_keyboard)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        header_text = f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏—è —à–∫–æ–ª—ã {school.name}</b>"
        self.bot.send_message(chat_id, header_text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
        for message in messages:
            text = f"‚Ä¢ <b>#{message.id}</b>\n"
            text += f"  <b>–ü—Ä–æ–±–ª–µ–º–∞:</b> {message.problem[:100]}{'...' if len(message.problem) > 100 else ''}\n"
            
            if message.help:
                text += f"  <b>–û–∂–∏–¥–∞–µ–º–∞—è –ø–æ–º–æ—â—å:</b> {message.help[:100]}{'...' if len(message.help) > 100 else ''}\n"
            
            if message.contact:
                text += f"  <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> {message.contact[:100]}{'...' if len(message.contact) > 100 else ''}\n"
            
            text += f"  <b>–°—Ç–∞—Ç—É—Å:</b> {message.get_status_display()}\n"
            text += f"  <i>{message.created_at.strftime('%d.%m.%Y %H:%M')}</i>"
            
            keyboard = {
                'inline_keyboard': [
                    [{'text': f'üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ #{message.id}', 'callback_data': f'message_{message.id}'}]
                ]
            }
            self.bot.send_message(chat_id, text, keyboard)
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        back_keyboard = {'inline_keyboard': [[{'text': 'üîô –ù–∞–∑–∞–¥ –∫ —à–∫–æ–ª–∞–º', 'callback_data': f'schools_page_1'}]]}
        self.bot.send_message(chat_id, "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∫–æ–ª–∞–º:", back_keyboard)
    
    def process_update(self, update: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram"""
        try:
            if 'message' in update:
                self.process_message(update['message'])
            elif 'callback_query' in update:
                self.process_callback_query(update['callback_query'])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    
    def process_message(self, message: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        chat_id = message['chat']['id']
        text = message.get('text', '')
        
        if text.startswith('/start'):
            self.handle_start(chat_id, message.get('from', {}))
        elif chat_id in self.user_sessions:
            state = self.user_sessions[chat_id]['state']
            if state == 'waiting_username':
                self.handle_username(chat_id, text)
            elif state == 'waiting_password':
                self.handle_password(chat_id, text)
            elif state == 'waiting_comment':
                self.handle_comment_text(chat_id, text)
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
            self.handle_text_message(chat_id, text)
    
    def process_callback_query(self, callback_query: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback query"""
        chat_id = callback_query['message']['chat']['id']
        callback_data = callback_query['data']
        message_id = callback_query['message']['message_id']
        query_id = callback_query['id']
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        self.handle_callback_query(chat_id, callback_data, message_id, query_id)
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        self.bot.answer_callback_query(query_id)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
bot_handler = TelegramBotHandler()
