from django.core.management.base import BaseCommand
from pathlib import Path
import os


class Command(BaseCommand):
    help = '–û–±–Ω–æ–≤–ª—è–µ—Ç .env —Ñ–∞–π–ª—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Telegram –±–æ—Ç–∞'

    def add_arguments(self, parser):
        parser.add_argument(
            '--env',
            choices=['dev', 'prod'],
            default='dev',
            help='–ö–∞–∫–æ–π .env —Ñ–∞–π–ª –æ–±–Ω–æ–≤–∏—Ç—å (dev –∏–ª–∏ prod)'
        )

    def handle(self, *args, **options):
        env_type = options['env']
        env_file = f'.env.{env_type}'
        env_path = Path(env_file)
        
        # Telegram Bot –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        telegram_settings = {
            'TELEGRAM_BOT_TOKEN': 'your_telegram_bot_token_here',
            'TELEGRAM_BOT_USERNAME': 'anonim_mektep_bot',
        }
        
        if env_type == 'dev':
            telegram_settings['TELEGRAM_WEBHOOK_URL'] = 'http://127.0.0.1:8009/telegram/webhook/'
        else:
            telegram_settings['TELEGRAM_WEBHOOK_URL'] = 'https://anonim-m.online/telegram/webhook/'
        
        self.stdout.write(
            self.style.SUCCESS(f'–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ {env_file}...')
        )
        
        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
        existing_lines = []
        if env_path.exists():
            with open(env_path, 'r', encoding='utf-8') as f:
                existing_lines = f.readlines()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
        updated_lines = []
        telegram_keys_found = set()
        
        for line in existing_lines:
            line_stripped = line.strip()
            if line_stripped and not line_stripped.startswith('#'):
                key = line_stripped.split('=')[0]
                if key in telegram_settings:
                    telegram_keys_found.add(key)
                    updated_lines.append(f'{key}={telegram_settings[key]}\n')
                    continue
            updated_lines.append(line)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        for key, value in telegram_settings.items():
            if key not in telegram_keys_found:
                updated_lines.append(f'{key}={value}\n')
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(env_path, 'w', encoding='utf-8') as f:
            f.writelines(updated_lines)
        
        self.stdout.write(
            self.style.SUCCESS(f'‚úÖ –§–∞–π–ª {env_file} –æ–±–Ω–æ–≤–ª–µ–Ω!')
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.stdout.write('\nüìã –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram:')
        for key, value in telegram_settings.items():
            self.stdout.write(f'  {key}={value}')
        
        self.stdout.write(
            self.style.WARNING(f'\n‚ö†Ô∏è  –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä Django')
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É —Å—Ä–µ–¥–∞–º–∏
        self.stdout.write('\nüîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Å—Ä–µ–¥–∞–º–∏:')
        self.stdout.write('  –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: export DJANGO_ENV=dev')
        self.stdout.write('  –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞: export DJANGO_ENV=prod')
        self.stdout.write('  –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ä–µ–¥—É: echo $DJANGO_ENV')
