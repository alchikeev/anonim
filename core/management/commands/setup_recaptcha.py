from django.core.management.base import BaseCommand
from pathlib import Path
import os


class Command(BaseCommand):
    help = '–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç reCAPTCHA –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª–∞—Ö'

    def add_arguments(self, parser):
        parser.add_argument(
            '--env',
            choices=['dev', 'prod', 'both'],
            default='both',
            help='–ö–∞–∫–æ–π .env —Ñ–∞–π–ª –æ–±–Ω–æ–≤–∏—Ç—å (dev, prod –∏–ª–∏ both)'
        )
        parser.add_argument(
            '--public-key',
            type=str,
            help='–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á reCAPTCHA'
        )
        parser.add_argument(
            '--private-key',
            type=str,
            help='–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á reCAPTCHA'
        )

    def handle(self, *args, **options):
        env_type = options['env']
        public_key = options.get('public_key')
        private_key = options.get('private_key')
        
        if not public_key or not private_key:
            self.show_instructions()
            return
        
        if env_type in ['dev', 'both']:
            self.update_env_file('.env.dev', public_key, private_key)
        
        if env_type in ['prod', 'both']:
            self.update_env_file('.env.prod', public_key, private_key)
        
        self.stdout.write(
            self.style.SUCCESS('‚úÖ reCAPTCHA –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!')
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.stdout.write('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:')
        os.system('python manage.py check_config')

    def show_instructions(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é reCAPTCHA –∫–ª—é—á–µ–π"""
        self.stdout.write(
            self.style.SUCCESS('üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ reCAPTCHA –¥–ª—è "–ê–Ω–æ–Ω–∏–º –ú–µ–∫—Ç–µ–ø"')
        )
        self.stdout.write('=' * 50)
        
        self.stdout.write('\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é –∫–ª—é—á–µ–π:')
        self.stdout.write('1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://www.google.com/recaptcha/admin')
        self.stdout.write('2. –ù–∞–∂–º–∏—Ç–µ "+" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–∞–π—Ç–∞')
        self.stdout.write('3. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É:')
        self.stdout.write('   - Label: –ê–Ω–æ–Ω–∏–º –ú–µ–∫—Ç–µ–ø')
        self.stdout.write('   - reCAPTCHA type: reCAPTCHA v3')
        self.stdout.write('   - Domains:')
        self.stdout.write('     * 127.0.0.1 (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)')
        self.stdout.write('     * localhost (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)')
        self.stdout.write('     * anonim-m.online (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)')
        self.stdout.write('4. –ü—Ä–∏–º–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è')
        self.stdout.write('5. –ù–∞–∂–º–∏—Ç–µ "Submit"')
        self.stdout.write('6. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ Site Key (–ø—É–±–ª–∏—á–Ω—ã–π) –∏ Secret Key (–ø—Ä–∏–≤–∞—Ç–Ω—ã–π)')
        
        self.stdout.write('\nüõ†Ô∏è –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:')
        self.stdout.write('# –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:')
        self.stdout.write('python manage.py setup_recaptcha --env dev --public-key YOUR_PUBLIC_KEY --private-key YOUR_PRIVATE_KEY')
        self.stdout.write('\n# –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞:')
        self.stdout.write('python manage.py setup_recaptcha --env prod --public-key YOUR_PUBLIC_KEY --private-key YOUR_PRIVATE_KEY')
        self.stdout.write('\n# –î–ª—è –æ–±–µ–∏—Ö —Å—Ä–µ–¥:')
        self.stdout.write('python manage.py setup_recaptcha --public-key YOUR_PUBLIC_KEY --private-key YOUR_PRIVATE_KEY')
        
        self.stdout.write('\n‚ö†Ô∏è  –í–∞–∂–Ω–æ:')
        self.stdout.write('- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ reCAPTCHA v3 –¥–ª—è –ª—É—á—à–µ–π –∑–∞—â–∏—Ç—ã')
        self.stdout.write('- –î–æ–±–∞–≤—å—Ç–µ –≤—Å–µ –¥–æ–º–µ–Ω—ã (dev –∏ prod) –≤ –æ–¥–∏–Ω —Å–∞–π—Ç')
        self.stdout.write('- –•—Ä–∞–Ω–∏—Ç–µ –∫–ª—é—á–∏ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏')

    def update_env_file(self, env_file, public_key, private_key):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç .env —Ñ–∞–π–ª —Å reCAPTCHA –∫–ª—é—á–∞–º–∏"""
        env_path = Path(env_file)
        
        if not env_path.exists():
            self.stdout.write(
                self.style.ERROR(f'‚ùå –§–∞–π–ª {env_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!')
            )
            return
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        with open(env_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏
        lines = content.split('\n')
        updated_lines = []
        public_key_found = False
        private_key_found = False
        
        for line in lines:
            if line.startswith('RECAPTCHA_PUBLIC_KEY='):
                updated_lines.append(f'RECAPTCHA_PUBLIC_KEY={public_key}')
                public_key_found = True
            elif line.startswith('RECAPTCHA_PRIVATE_KEY='):
                updated_lines.append(f'RECAPTCHA_PRIVATE_KEY={private_key}')
                private_key_found = True
            else:
                updated_lines.append(line)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª—é—á–∏
        if not public_key_found:
            updated_lines.append(f'RECAPTCHA_PUBLIC_KEY={public_key}')
        if not private_key_found:
            updated_lines.append(f'RECAPTCHA_PRIVATE_KEY={private_key}')
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(env_path, 'w', encoding='utf-8') as f:
            f.write('\n'.join(updated_lines))
        
        self.stdout.write(
            self.style.SUCCESS(f'‚úÖ {env_file} –æ–±–Ω–æ–≤–ª–µ–Ω —Å reCAPTCHA –∫–ª—é—á–∞–º–∏')
        )
