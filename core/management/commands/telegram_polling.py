from django.core.management.base import BaseCommand
from django.conf import settings
from core.telegram_bot import bot_handler
import requests
import json
import time
import signal
import sys


class Command(BaseCommand):
    help = '–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)'
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.running = True
        self.last_update_id = 0
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
    
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        self.stdout.write(self.style.WARNING('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling...'))
        self.running = False
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--timeout',
            type=int,
            default=30,
            help='–¢–∞–π–º–∞—É—Ç –¥–ª—è long polling (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 —Å–µ–∫—É–Ω–¥)'
        )
        parser.add_argument(
            '--limit',
            type=int,
            default=100,
            help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞ —Ä–∞–∑ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100)'
        )
    
    def handle(self, *args, **options):
        timeout = options['timeout']
        limit = options['limit']
        
        if not settings.TELEGRAM_BOT_TOKEN:
            self.stdout.write(
                self.style.ERROR('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ settings.py')
            )
            return
        
        self.stdout.write(
            self.style.SUCCESS('ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...')
        )
        self.stdout.write(f'üì° –¢–∞–π–º–∞—É—Ç: {timeout} —Å–µ–∫—É–Ω–¥')
        self.stdout.write(f'üìä –õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {limit}')
        self.stdout.write('‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C\n')
        
        try:
            while self.running:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    updates = self.get_updates(timeout, limit)
                    
                    if updates:
                        self.stdout.write(
                            self.style.SUCCESS(f'üì® –ü–æ–ª—É—á–µ–Ω–æ {len(updates)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π')
                        )
                        
                        for update in updates:
                            try:
                                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                                bot_handler.process_update(update)
                                self.stdout.write(f'‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {update.get("update_id", "?")}')
                            except Exception as e:
                                self.stdout.write(
                                    self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}')
                                )
                    
                except KeyboardInterrupt:
                    break
                except Exception as e:
                    self.stdout.write(
                        self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}')
                    )
                    time.sleep(5)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                    
        except KeyboardInterrupt:
            pass
        
        self.stdout.write(self.style.SUCCESS('üëã Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'))
    
    def get_updates(self, timeout, limit):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
        try:
            url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/getUpdates"
            params = {
                'offset': self.last_update_id + 1,
                'limit': limit,
                'timeout': timeout,
                'allowed_updates': ['message', 'callback_query']
            }
            
            response = requests.get(url, params=params, timeout=timeout + 10)
            response.raise_for_status()
            
            result = response.json()
            
            if result.get('ok'):
                updates = result.get('result', [])
                
                # –û–±–Ω–æ–≤–ª—è–µ–º last_update_id
                if updates:
                    self.last_update_id = max(update['update_id'] for update in updates)
                
                return updates
            else:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ API: {result.get("description")}')
                )
                return []
                
        except requests.exceptions.Timeout:
            # –¢–∞–π–º–∞—É—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è long polling
            return []
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}')
            )
            return []
